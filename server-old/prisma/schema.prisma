generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Conference {
  abbrev    String
  divisions Division[]
  id        Int        @id
  league    League     @relation(fields: [leagueId], references: [id])
  leagueId  Int
  name      String
  players   Player[]
  teams     Team[]
}

model Division {
  abbrev       String
  conference   Conference @relation(fields: [conferenceId], references: [id])
  conferenceId Int        @map("conference_id")
  id           Int        @id
  league       League     @relation(fields: [leagueId], references: [id])
  leagueId     Int        @map("league_id")
  name         String
  players      Player[]
  teams        Team[]
}

model Game {
  date    DateTime
  id      Int      @id
  team0   Team     @relation(name: "Team0Games", fields: [team0Id], references: [id])
  team1   Team     @relation(name: "Team1Games", fields: [team1Id], references: [id])
  team0Id Int
  team1Id Int
}

model GameEvent {
  awayTeam         Team?    @relation(name: "AwayTeamGameEvents", fields: [awayTeamId], references: [id])
  awayTeamId       Int?     @map("away_team_id")
  bool0            Boolean?
  bool1            Boolean?
  // defPlayersOnCourt Player[] @relation(name: "DefPlayersOnCourtGameEvents")
  defTeam          Team?    @relation(name: "DefTeamGameEvents", fields: [defTeamId], references: [id])
  defTeamId        Int?     @map("def_team_id")
  float0           Float?
  gameEvent        String   @map("game_event")
  gameId           Int      @map("game_id")
  gameType         String   @map("game_type")
  id               String   @id
  int0             Int?
  int1             Int?
  int2             Int?
  homeTeam         Team?    @relation(name: "HomeTeamGameEvents", fields: [homeTeamId], references: [id])
  homeTeamId       Int?     @map("home_team_id")
  player0          Player?  @relation(name: "Player0GameEvents", fields: [player0Id], references: [id])
  player0Id        Int?     @map("player0_id")
  player1          Player?  @relation(name: "Player1GameEvents", fields: [player1Id], references: [id])
  player1Id        Int?     @map("player1_id")
  player2          Player?  @relation(name: "Player2GameEvents", fields: [player2Id], references: [id])
  player2Id        Int?     @map("player2_id")
  // offPlayersOnCourt Player[] @relation(name: "OffPlayersOnCourtGameEvents")
  offTeam          Team?    @relation(name: "OffTeamGameEvents", fields: [offTeamId], references: [id])
  offTeamId        Int?     @map("off_team_id")
  possessionLength Float?   @map("possession_length")
  segment          Int?
  team0            Team?    @relation(name: "Team0GameEvents", fields: [team0Id], references: [id])
  team0Id          Int?     @map("team0_id")
  team1            Team?    @relation(name: "Team1GameEvents", fields: [team1Id], references: [id])
  team1Id          Int?     @map("team1_id")
  text0            String?
}

model League {
  abbrev      String
  conferences Conference[]
  date        DateTime
  divisions   Division[]
  id          Int          @id @default(autoincrement())
  name        String
  players     Player[]
  teams       Team[]
}

model Player {
  active            Boolean
  arc3              Int         @default(50)
  atRim             Int         @default(50) @map("at_rim")
  birthdate         DateTime
  blocking          Int         @default(50)
  corner3           Int         @default(50)
  country           String?
  division          Division    @relation(fields: [divisionId], references: [id])
  // defPlayersOnCourtGameEvents GameEvent[] @relation("DefPlayersOnCourtGameEvents")
  draftNumber       Int?        @map("draft_number")
  draftRound        Int?        @map("draft_round")
  draftYear         DateTime?   @map("draft_year")
  familyName        String      @map("family_name")
  freeThrow         Int         @default(50) @map("free_throw")
  fromYear          DateTime?   @map("from_year")
  givenName         String      @map("given_name")
  greatest75        Boolean     @map("greatest_75")
  hasPlayedDLeague  Boolean     @map("has_played_d_league")
  hasPlayedGames    Boolean     @map("has_played_games")
  hasPlayedNba      Boolean     @map("has_played_nba")
  height            Int
  id                Int         @id
  irritability      Int         @default(50)
  jerseyNumber      Int?        @map("jersey_number")
  jumping           Int         @default(50)
  league            League      @relation(fields: [leagueId], references: [id])
  midRangeLong      Int         @default(50)
  midRangeShort     Int         @default(50)
  player0GameEvents GameEvent[] @relation("Player0GameEvents")
  player1GameEvents GameEvent[] @relation("Player1GameEvents")
  player2GameEvents GameEvent[] @relation("Player2GameEvents")
  // offPlayersOnCourtGameEvents GameEvent[] @relation("OffPlayersOnCourtGameEvents")
  playerCode        String?     @map("player_code")
  position          String
  rebounding        Int         @default(50)
  school            String?
  seasonsExperience Int         @map("seasons_experience")
  slug              String      @unique
  stealing          Int         @default(50)
  team              Team        @relation(fields: [teamId], references: [id])
  teamId            Int         @map("team_id")
  toYear            DateTime?   @map("to_year")
  turnoverProne     Int         @default(50) @map("turnover_prone")
  weight            Int
  divisionId        Int
  leagueId          Int
  Conference        Conference? @relation(fields: [conferenceId], references: [id])
  conferenceId      Int?
}

model Team {
  abbrev             String      @unique
  awayTeamGameEvents GameEvent[] @relation("AwayTeamGameEvents")
  defTeamGameEvents  GameEvent[] @relation("DefTeamGameEvents")
  division           Division    @relation(fields: [divisionId], references: [id])
  facebook           String
  homeName           String      @map("home_name")
  homeTeamGameEvents GameEvent[] @relation("HomeTeamGameEvents")
  id                 Int         @id
  instagram          String
  lat                Float
  lng                Float
  league             League      @relation(fields: [leagueId], references: [id])
  nickname           String
  offTeamGameEvents  GameEvent[] @relation("OffTeamGameEvents")
  players            Player[]
  team0GameEvents    GameEvent[] @relation("Team0GameEvents")
  team1GameEvents    GameEvent[] @relation("Team1GameEvents")
  twitter            String
  venue              String
  venueCapacity      Int         @map("venue_capacity")
  yearFounded        DateTime    @map("year_founded")
  leagueId           Int
  divisionId         Int
  Conference         Conference? @relation(fields: [conferenceId], references: [id])
  conferenceId       Int?
  team0Games         Game[]      @relation("Team0Games")
  team1Games         Game[]      @relation("Team1Games")
}
