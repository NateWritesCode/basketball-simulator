/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../types/index"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Json";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  Bytes: any
  DateTime: any
  Decimal: any
  Json: any
}

export interface NexusGenObjects {
  Conference: { // root type
    abbrev: string; // String!
    divisions?: NexusGenRootTypes['Division'][] | null; // [Division!]
    id: number; // Int!
    league: NexusGenRootTypes['League']; // League!
    name: string; // String!
  }
  Division: { // root type
    abbrev: string; // String!
    conference?: NexusGenRootTypes['Conference'] | null; // Conference
    id: number; // Int!
    league: NexusGenRootTypes['League']; // League!
    name: string; // String!
  }
  Game: { // root type
    id?: number | null; // Int
  }
  League: { // root type
    abbrev: string; // String!
    conferences?: NexusGenRootTypes['Conference'][] | null; // [Conference!]
    divisions?: NexusGenRootTypes['Division'][] | null; // [Division!]
    id: number; // Int!
    name: string; // String!
  }
  Mutation: {};
  Player: { // root type
    active: boolean; // Boolean!
    birthdate: NexusGenScalars['DateTime']; // DateTime!
    country?: string | null; // String
    draftNumber?: number | null; // Int
    draftRound?: number | null; // Int
    draftYear?: NexusGenScalars['DateTime'] | null; // DateTime
    familyName: string; // String!
    fromYear?: NexusGenScalars['DateTime'] | null; // DateTime
    givenName: string; // String!
    greatest75: boolean; // Boolean!
    hasPlayedDLeague: boolean; // Boolean!
    hasPlayedGames: boolean; // Boolean!
    hasPlayedNba: boolean; // Boolean!
    height: number; // Int!
    id: number; // Int!
    jerseyNumber?: number | null; // Int
    playerCode?: string | null; // String
    position: string; // String!
    rebounding: number; // Int!
    school?: string | null; // String
    seasonsExperience: number; // Int!
    slug: string; // String!
    toYear?: NexusGenScalars['DateTime'] | null; // DateTime
    weight: number; // Int!
  }
  Query: {};
  SimResult: { // root type
    playerStats: Array<Array<NexusGenRootTypes['SimResultPlayer'] | null> | null>; // [[SimResultPlayer]]!
    teamStats: NexusGenRootTypes['SimResultTeam'][]; // [SimResultTeam!]!
    teams: Array<NexusGenRootTypes['Team'] | null>; // [Team]!
  }
  SimResultPlayer: { // root type
    andOne: number; // Int!
    ast: number; // Int!
    blk: number; // Int!
    blkd: number; // Int!
    drb: number; // Int!
    dunks: number; // Int!
    fatigue: number; // Float!
    fga: number; // Int!
    fgm: number; // Int!
    fouls: number; // Int!
    foulsOffensive: number; // Int!
    foulsShooting: number; // Int!
    fta: number; // Int!
    ftm: number; // Int!
    heaves: number; // Int!
    id: number; // Int!
    inspiration: number; // Int!
    jumpBallsLost: number; // Int!
    jumpBallsWon: number; // Int!
    name: string; // String!
    offensiveFoul: number; // Int!
    offensiveFoulCharge: number; // Int!
    offensiveFoulOther: number; // Int!
    orb: number; // Int!
    pga: number; // Int!
    plusMinus: number; // Int!
    position: string; // String!
    pts: number; // Int!
    secondsPlayed: number; // Int!
    slug: string; // String!
    starter: boolean; // Boolean!
    stl: number; // Int!
    teamId: number; // Int!
    teamIndex: number; // Int!
    timePlayed: number; // Float!
    tov: number; // Int!
    tpa: number; // Int!
    tpm: number; // Int!
  }
  SimResultTeam: { // root type
    andOne: number; // Int!
    ast: number; // Int!
    blk: number; // Int!
    blkd: number; // Int!
    drb: number; // Int!
    dunks: number; // Int!
    fga: number; // Int!
    fgm: number; // Int!
    fouls: number; // Int!
    foulsOffensive: number; // Int!
    foulsShooting: number; // Int!
    fta: number; // Int!
    ftm: number; // Int!
    heaves: number; // Int!
    id: number; // Int!
    jumpBallsLost: number; // Int!
    jumpBallsWon: number; // Int!
    name: string; // String!
    offensiveFoul: number; // Int!
    offensiveFoulCharge: number; // Int!
    offensiveFoulOther: number; // Int!
    orb: number; // Int!
    pf: number; // Int!
    pga: number; // Int!
    pts: number; // Int!
    stl: number; // Int!
    teamDrb: number; // Int!
    teamOrb: number; // Int!
    timeouts: number; // Int!
    tov: number; // Int!
    tpa: number; // Int!
    tpm: number; // Int!
  }
  Standings: { // root type
    league: NexusGenRootTypes['League']; // League!
    teams: NexusGenRootTypes['StandingsTeam'][]; // [StandingsTeam!]!
  }
  StandingsTeam: { // root type
    abbrev: string; // String!
    conferenceId?: number | null; // Int
    divisionId?: number | null; // Int
    homeName: string; // String!
    id: number; // Int!
    l: number; // Int!
    leagueId: number; // Int!
    nickname: string; // String!
    w: number; // Int!
  }
  Team: { // root type
    abbrev?: string | null; // String
    facebook?: string | null; // String
    homeName?: string | null; // String
    id?: number | null; // Int
    instagram?: string | null; // String
    nickname?: string | null; // String
    players?: NexusGenRootTypes['Player'][] | null; // [Player!]
    twitter?: string | null; // String
    venue?: string | null; // String
    venueCapacity?: number | null; // Int
    yearFounded?: NexusGenScalars['DateTime'] | null; // DateTime
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Conference: { // field return type
    abbrev: string; // String!
    divisions: NexusGenRootTypes['Division'][] | null; // [Division!]
    id: number; // Int!
    league: NexusGenRootTypes['League']; // League!
    name: string; // String!
  }
  Division: { // field return type
    abbrev: string; // String!
    conference: NexusGenRootTypes['Conference'] | null; // Conference
    id: number; // Int!
    league: NexusGenRootTypes['League']; // League!
    name: string; // String!
  }
  Game: { // field return type
    id: number | null; // Int
  }
  League: { // field return type
    abbrev: string; // String!
    conferences: NexusGenRootTypes['Conference'][] | null; // [Conference!]
    divisions: NexusGenRootTypes['Division'][] | null; // [Division!]
    id: number; // Int!
    name: string; // String!
  }
  Mutation: { // field return type
    createOneTest: boolean | null; // Boolean
    resetData: boolean | null; // Boolean
    startGameSim: NexusGenRootTypes['SimResult'] | null; // SimResult
  }
  Player: { // field return type
    active: boolean; // Boolean!
    birthdate: NexusGenScalars['DateTime']; // DateTime!
    country: string | null; // String
    draftNumber: number | null; // Int
    draftRound: number | null; // Int
    draftYear: NexusGenScalars['DateTime'] | null; // DateTime
    familyName: string; // String!
    fromYear: NexusGenScalars['DateTime'] | null; // DateTime
    givenName: string; // String!
    greatest75: boolean; // Boolean!
    hasPlayedDLeague: boolean; // Boolean!
    hasPlayedGames: boolean; // Boolean!
    hasPlayedNba: boolean; // Boolean!
    height: number; // Int!
    id: number; // Int!
    jerseyNumber: number | null; // Int
    playerCode: string | null; // String
    position: string; // String!
    rebounding: number; // Int!
    school: string | null; // String
    seasonsExperience: number; // Int!
    slug: string; // String!
    team: NexusGenRootTypes['Team']; // Team!
    toYear: NexusGenScalars['DateTime'] | null; // DateTime
    weight: number; // Int!
  }
  Query: { // field return type
    getOneGame: NexusGenRootTypes['Game'] | null; // Game
    getOnePlayer: NexusGenRootTypes['Player'] | null; // Player
    getOneTeam: NexusGenRootTypes['Team'] | null; // Team
    getOneTest: boolean | null; // Boolean
    getStandings: NexusGenRootTypes['Standings']; // Standings!
    sqlSandbox: string | null; // String
  }
  SimResult: { // field return type
    playerStats: Array<Array<NexusGenRootTypes['SimResultPlayer'] | null> | null>; // [[SimResultPlayer]]!
    teamStats: NexusGenRootTypes['SimResultTeam'][]; // [SimResultTeam!]!
    teams: Array<NexusGenRootTypes['Team'] | null>; // [Team]!
  }
  SimResultPlayer: { // field return type
    andOne: number; // Int!
    ast: number; // Int!
    blk: number; // Int!
    blkd: number; // Int!
    drb: number; // Int!
    dunks: number; // Int!
    fatigue: number; // Float!
    fga: number; // Int!
    fgm: number; // Int!
    fouls: number; // Int!
    foulsOffensive: number; // Int!
    foulsShooting: number; // Int!
    fta: number; // Int!
    ftm: number; // Int!
    heaves: number; // Int!
    id: number; // Int!
    inspiration: number; // Int!
    jumpBallsLost: number; // Int!
    jumpBallsWon: number; // Int!
    name: string; // String!
    offensiveFoul: number; // Int!
    offensiveFoulCharge: number; // Int!
    offensiveFoulOther: number; // Int!
    orb: number; // Int!
    pga: number; // Int!
    plusMinus: number; // Int!
    position: string; // String!
    pts: number; // Int!
    secondsPlayed: number; // Int!
    slug: string; // String!
    starter: boolean; // Boolean!
    stl: number; // Int!
    teamId: number; // Int!
    teamIndex: number; // Int!
    timePlayed: number; // Float!
    tov: number; // Int!
    tpa: number; // Int!
    tpm: number; // Int!
  }
  SimResultTeam: { // field return type
    andOne: number; // Int!
    ast: number; // Int!
    blk: number; // Int!
    blkd: number; // Int!
    drb: number; // Int!
    dunks: number; // Int!
    fga: number; // Int!
    fgm: number; // Int!
    fouls: number; // Int!
    foulsOffensive: number; // Int!
    foulsShooting: number; // Int!
    fta: number; // Int!
    ftm: number; // Int!
    heaves: number; // Int!
    id: number; // Int!
    jumpBallsLost: number; // Int!
    jumpBallsWon: number; // Int!
    name: string; // String!
    offensiveFoul: number; // Int!
    offensiveFoulCharge: number; // Int!
    offensiveFoulOther: number; // Int!
    orb: number; // Int!
    pf: number; // Int!
    pga: number; // Int!
    pts: number; // Int!
    stl: number; // Int!
    teamDrb: number; // Int!
    teamOrb: number; // Int!
    timeouts: number; // Int!
    tov: number; // Int!
    tpa: number; // Int!
    tpm: number; // Int!
  }
  Standings: { // field return type
    league: NexusGenRootTypes['League']; // League!
    teams: NexusGenRootTypes['StandingsTeam'][]; // [StandingsTeam!]!
  }
  StandingsTeam: { // field return type
    abbrev: string; // String!
    conferenceId: number | null; // Int
    divisionId: number | null; // Int
    homeName: string; // String!
    id: number; // Int!
    l: number; // Int!
    leagueId: number; // Int!
    nickname: string; // String!
    w: number; // Int!
  }
  Team: { // field return type
    abbrev: string | null; // String
    facebook: string | null; // String
    homeName: string | null; // String
    id: number | null; // Int
    instagram: string | null; // String
    nickname: string | null; // String
    players: NexusGenRootTypes['Player'][] | null; // [Player!]
    twitter: string | null; // String
    venue: string | null; // String
    venueCapacity: number | null; // Int
    yearFounded: NexusGenScalars['DateTime'] | null; // DateTime
  }
}

export interface NexusGenFieldTypeNames {
  Conference: { // field return type name
    abbrev: 'String'
    divisions: 'Division'
    id: 'Int'
    league: 'League'
    name: 'String'
  }
  Division: { // field return type name
    abbrev: 'String'
    conference: 'Conference'
    id: 'Int'
    league: 'League'
    name: 'String'
  }
  Game: { // field return type name
    id: 'Int'
  }
  League: { // field return type name
    abbrev: 'String'
    conferences: 'Conference'
    divisions: 'Division'
    id: 'Int'
    name: 'String'
  }
  Mutation: { // field return type name
    createOneTest: 'Boolean'
    resetData: 'Boolean'
    startGameSim: 'SimResult'
  }
  Player: { // field return type name
    active: 'Boolean'
    birthdate: 'DateTime'
    country: 'String'
    draftNumber: 'Int'
    draftRound: 'Int'
    draftYear: 'DateTime'
    familyName: 'String'
    fromYear: 'DateTime'
    givenName: 'String'
    greatest75: 'Boolean'
    hasPlayedDLeague: 'Boolean'
    hasPlayedGames: 'Boolean'
    hasPlayedNba: 'Boolean'
    height: 'Int'
    id: 'Int'
    jerseyNumber: 'Int'
    playerCode: 'String'
    position: 'String'
    rebounding: 'Int'
    school: 'String'
    seasonsExperience: 'Int'
    slug: 'String'
    team: 'Team'
    toYear: 'DateTime'
    weight: 'Int'
  }
  Query: { // field return type name
    getOneGame: 'Game'
    getOnePlayer: 'Player'
    getOneTeam: 'Team'
    getOneTest: 'Boolean'
    getStandings: 'Standings'
    sqlSandbox: 'String'
  }
  SimResult: { // field return type name
    playerStats: 'SimResultPlayer'
    teamStats: 'SimResultTeam'
    teams: 'Team'
  }
  SimResultPlayer: { // field return type name
    andOne: 'Int'
    ast: 'Int'
    blk: 'Int'
    blkd: 'Int'
    drb: 'Int'
    dunks: 'Int'
    fatigue: 'Float'
    fga: 'Int'
    fgm: 'Int'
    fouls: 'Int'
    foulsOffensive: 'Int'
    foulsShooting: 'Int'
    fta: 'Int'
    ftm: 'Int'
    heaves: 'Int'
    id: 'Int'
    inspiration: 'Int'
    jumpBallsLost: 'Int'
    jumpBallsWon: 'Int'
    name: 'String'
    offensiveFoul: 'Int'
    offensiveFoulCharge: 'Int'
    offensiveFoulOther: 'Int'
    orb: 'Int'
    pga: 'Int'
    plusMinus: 'Int'
    position: 'String'
    pts: 'Int'
    secondsPlayed: 'Int'
    slug: 'String'
    starter: 'Boolean'
    stl: 'Int'
    teamId: 'Int'
    teamIndex: 'Int'
    timePlayed: 'Float'
    tov: 'Int'
    tpa: 'Int'
    tpm: 'Int'
  }
  SimResultTeam: { // field return type name
    andOne: 'Int'
    ast: 'Int'
    blk: 'Int'
    blkd: 'Int'
    drb: 'Int'
    dunks: 'Int'
    fga: 'Int'
    fgm: 'Int'
    fouls: 'Int'
    foulsOffensive: 'Int'
    foulsShooting: 'Int'
    fta: 'Int'
    ftm: 'Int'
    heaves: 'Int'
    id: 'Int'
    jumpBallsLost: 'Int'
    jumpBallsWon: 'Int'
    name: 'String'
    offensiveFoul: 'Int'
    offensiveFoulCharge: 'Int'
    offensiveFoulOther: 'Int'
    orb: 'Int'
    pf: 'Int'
    pga: 'Int'
    pts: 'Int'
    stl: 'Int'
    teamDrb: 'Int'
    teamOrb: 'Int'
    timeouts: 'Int'
    tov: 'Int'
    tpa: 'Int'
    tpm: 'Int'
  }
  Standings: { // field return type name
    league: 'League'
    teams: 'StandingsTeam'
  }
  StandingsTeam: { // field return type name
    abbrev: 'String'
    conferenceId: 'Int'
    divisionId: 'Int'
    homeName: 'String'
    id: 'Int'
    l: 'Int'
    leagueId: 'Int'
    nickname: 'String'
    w: 'Int'
  }
  Team: { // field return type name
    abbrev: 'String'
    facebook: 'String'
    homeName: 'String'
    id: 'Int'
    instagram: 'String'
    nickname: 'String'
    players: 'Player'
    twitter: 'String'
    venue: 'String'
    venueCapacity: 'Int'
    yearFounded: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Query: {
    getOnePlayer: { // args
      slug: string; // String!
    }
    getOneTeam: { // args
      abbrev: string; // String!
    }
    getStandings: { // args
      gameGroupId: string; // ID!
    }
    sqlSandbox: { // args
      dbType: string; // String!
      sqlString: string; // String!
      values?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}