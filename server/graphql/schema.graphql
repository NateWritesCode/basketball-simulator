### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

"""Game description"""
type Game {
  id: Int
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createOneTest: Boolean
  startGameSim: SimResult
}

type Player {
  active: Boolean!
  birthdate: DateTime!
  country: String
  draftNumber: Int
  draftRound: Int
  draftYear: DateTime
  familyName: String!
  fromYear: DateTime
  givenName: String!
  greatest75: Boolean!
  hasPlayedDLeague: Boolean!
  hasPlayedGames: Boolean!
  hasPlayedNba: Boolean!
  height: Int!
  id: Int!
  jerseyNumber: Int
  playerCode: String
  position: String!
  rebounding: Int!
  school: String
  seasonsExperience: Int!
  slug: String!
  team: Team!
  toYear: DateTime
  weight: Int!
}

type Query {
  getOneGame: Game
  getOnePlayer(slug: String!): Player
  getOneTeam(abbrev: String!): Team
  getOneTest: Boolean
  getStandings(gameGroupId: ID!): Standings
  sqlSandbox(dbType: String!, sqlString: String!, values: String): String
}

"""Sim result"""
type SimResult {
  playerStats: [[SimResultPlayer]]!
  teamStats: [SimResultTeam!]!
  teams: [Team]!
}

"""Sim result player"""
type SimResultPlayer {
  andOne: Int!
  ast: Int!
  blk: Int!
  blkd: Int!
  drb: Int!
  dunks: Int!
  fatigue: Float!
  fga: Int!
  fgm: Int!
  fouls: Int!
  foulsOffensive: Int!
  foulsShooting: Int!
  fta: Int!
  ftm: Int!
  heaves: Int!
  id: Int!
  inspiration: Int!
  jumpBallsLost: Int!
  jumpBallsWon: Int!
  name: String!
  offensiveFoul: Int!
  offensiveFoulCharge: Int!
  offensiveFoulOther: Int!
  orb: Int!
  pga: Int!
  plusMinus: Int!
  position: String!
  pts: Int!
  secondsPlayed: Int!
  slug: String!
  starter: Boolean!
  stl: Int!
  teamId: Int!
  teamIndex: Int!
  timePlayed: Float!
  tov: Int!
  tpa: Int!
  tpm: Int!
}

"""Sim result team"""
type SimResultTeam {
  andOne: Int!
  ast: Int!
  blk: Int!
  blkd: Int!
  drb: Int!
  dunks: Int!
  fga: Int!
  fgm: Int!
  fouls: Int!
  foulsOffensive: Int!
  foulsShooting: Int!
  fta: Int!
  ftm: Int!
  heaves: Int!
  id: Int!
  jumpBallsLost: Int!
  jumpBallsWon: Int!
  name: String!
  offensiveFoul: Int!
  offensiveFoulCharge: Int!
  offensiveFoulOther: Int!
  orb: Int!
  pf: Int!
  pga: Int!
  pts: Int!
  stl: Int!
  teamDrb: Int!
  teamOrb: Int!
  timeouts: Int!
  tov: Int!
  tpa: Int!
  tpm: Int!
}

"""Standings description"""
type Standings {
  l: Int!
  team: [Team!]!
  w: Int!
}

"""Taco description"""
type Taco {
  isEdible: Boolean
}

type Team {
  abbrev: String!
  facebook: String!
  homeName: String!
  id: Int!
  instagram: String!
  nickname: String!
  players: [Player!]!
  twitter: String!
  venue: String!
  venueCapacity: Int!
  yearFounded: DateTime!
}