import { Player } from ".";
import {
  IObserver,
  GameSimStats,
  GameSimStatFields,
  GameEventEnum,
  GameEvent2FgAttempt,
  GameEvent3FgAttempt,
  GameEventJumpBallWon,
  GameEventStartingLineup,
  GameEventBlock,
  GameEvent2FgMade,
  GameEvent3FgMade,
  GameEventRebound,
  GameEventFreeThrow,
  GameEventNonShootingDefensiveFoul,
  GameEvent3FgMadeFoul,
  GameEvent3FgMissFoul,
  GameEvent2FgMissFoul,
  GameEvent2FgMadeFoul,
  GameEventSteal,
  GameEventTurnover,
} from "../types";

class GamePlayerState implements IObserver {
  andOne: number;
  ast: number;
  blk: number;
  blkd: number; //num of times blocked
  drb: number;
  dunks: number;
  fatigue: number;
  fga: number;
  fgm: number;
  fta: number;
  ftm: number;
  fouls: number;
  foulsOffensive: number;
  foulsShooting: number;
  gameSimStats: GameSimStats | null;
  gameSimSegmentData: GameSimStats[];
  heaves: number; //shots in front of half court
  id: number;
  inspiration: number;
  jumpBallsLost: number;
  jumpBallsWon: number;
  orb: number;
  pga: number; //pts generated by assist
  plusMinus: number;
  pts: number;
  secondsPlayed: number;
  starter: boolean;
  stl: number;
  teamIndex: number;
  tov: number;
  tpa: number; //3 attempts
  tpm: number; //3 makes

  constructor(id: number, teamIndex: number) {
    this.andOne = 0;
    this.ast = 0;
    this.blk = 0;
    this.blkd = 0;
    this.drb = 0;
    this.dunks = 0;
    this.fatigue = 0;
    this.fga = 0;
    this.fgm = 0;
    this.fouls = 0;
    this.foulsShooting = 0;
    this.foulsOffensive = 0;
    this.fta = 0;
    this.ftm = 0;
    this.gameSimSegmentData = [];
    this.gameSimStats = null;
    this.heaves = 0;
    this.id = id;
    this.inspiration = 0;
    this.jumpBallsLost = 0;
    this.jumpBallsWon = 0;
    this.orb = 0;
    this.pga = 0;
    this.plusMinus = 0;
    this.pts = 0;
    this.secondsPlayed = 0;
    this.starter = false;
    this.stl = 0;
    this.teamIndex = teamIndex;
    this.tov = 0;
    this.tpa = 0;
    this.tpm = 0;
  }

  gatherGameSimSegmentData = (
    statFields: GameSimStatFields[]
  ): GameSimStats => {
    const gameSimStats = this.gatherGameSimStats(statFields);

    if (this.gameSimSegmentData.length === 0) {
      return gameSimStats;
    } else {
      const previousSegmentsGameStatsSummed = this.gameSimSegmentData.reduce(
        (a, b) => {
          const keys = Object.keys(b) as GameSimStatFields[];
          keys.forEach((key) => {
            a[key] += b[key];
          });

          return a;
        },
        statFields.reduce<GameSimStats>(
          (a, v) => ({ ...a, [v]: 0 }),
          {} as GameSimStats
        )
      );

      statFields.forEach((statField) => {
        gameSimStats[statField] -= previousSegmentsGameStatsSummed[statField];
      });

      return gameSimStats;
    }
  };

  gatherGameSimStats = (statFields: GameSimStatFields[]): GameSimStats => {
    const gameSimStats = statFields.reduce<GameSimStats>(
      (a, v) => ({ ...a, [v]: 0 }),
      {} as GameSimStats
    );

    statFields.forEach((statField) => {
      gameSimStats[statField] = this[statField];
    });

    return gameSimStats;
  };

  getPlayerFromArrayById = (players: Player[]): Player | null => {
    const index = players.findIndex((player) => player.id === this.id);
    const player = players[index];
    if (player) return player;

    return null;
  };

  notifyGameEvent(gameEvent: GameEventEnum, gameEventData: unknown): void {
    switch (gameEvent) {
      case "2FG_ATTEMPT": {
        const { player } = gameEventData as GameEvent2FgAttempt;
        if (player.id === this.id) {
          this.fga += 1;
        }

        break;
      }
      case "2FG_BLOCK": {
        const { player, blockingPlayer } = gameEventData as GameEventBlock;
        if (player.id === this.id) {
          this.blkd += 1;
        }
        if (blockingPlayer.id === this.id) {
          this.blk += 1;
        }
        break;
      }
      case "2FG_MADE": {
        const { player } = gameEventData as GameEvent2FgMade;
        if (player.id === this.id) {
          this.fgm += 1;
          this.pts += 2;
        }

        break;
      }
      case "2FG_MADE_FOUL": {
        const { player, foulingPlayer } = gameEventData as GameEvent2FgMadeFoul;
        if (player.id === this.id) {
          this.andOne += 1;
          this.fgm += 1;
          this.pts += 2;
        }

        if (foulingPlayer.id === this.id) {
          this.fouls += 1;
          this.foulsShooting == 1;
        }
        break;
      }
      case "2FG_MISS": {
        break;
      }
      case "2FG_MISS_FOUL": {
        const { foulingPlayer } = gameEventData as GameEvent2FgMissFoul;
        if (foulingPlayer.id === this.id) {
          this.fouls += 1;
          this.foulsShooting == 1;
        }
        break;
      }
      case "3FG_ATTEMPT": {
        const { player } = gameEventData as GameEvent3FgAttempt;
        if (player.id === this.id) {
          this.fga += 1;
          this.tpa += 1;
        }

        break;
      }
      case "3FG_BLOCK": {
        const { player, blockingPlayer } = gameEventData as GameEventBlock;
        if (player.id === this.id) {
          this.blkd += 1;
        }
        if (blockingPlayer.id === this.id) {
          this.blk += 1;
        }
        break;
      }
      case "3FG_MADE": {
        const { player } = gameEventData as GameEvent3FgMade;
        if (player.id === this.id) {
          this.fgm += 1;
          this.pts += 3;
          this.tpm += 1;
        }

        break;
      }
      case "3FG_MADE_FOUL": {
        const { player, foulingPlayer } = gameEventData as GameEvent3FgMadeFoul;
        if (player.id === this.id) {
          this.andOne += 1;
          this.fgm += 1;
          this.pts += 3;
          this.tpm += 1;
        }

        if (foulingPlayer.id === this.id) {
          this.fouls += 1;
          this.foulsShooting == 1;
        }

        break;
      }
      case "3FG_MISS": {
        break;
      }
      case "3FG_MISS_FOUL": {
        const { foulingPlayer } = gameEventData as GameEvent3FgMissFoul;
        if (foulingPlayer.id === this.id) {
          this.fouls += 1;
          this.foulsShooting == 1;
        }
        break;
      }
      case "DEFENSIVE_REBOUND": {
        const { player } = gameEventData as GameEventRebound;
        if (player && player.id === this.id) {
          this.drb += 1;
        }

        break;
      }

      case "FREE_THROW": {
        const { player, shotMade } = gameEventData as GameEventFreeThrow;

        if (player.id === this.id) {
          this.fta += 1;
          if (shotMade) {
            this.ftm += 1;
            this.pts += 1;
          }
        }

        break;
      }

      case "GAME_END": {
        this.gameSimStats = this.gatherGameSimStats([
          "jumpBallsLost",
          "jumpBallsWon",
          "pts",
        ]);
        break;
      }
      case "GAME_START": {
        break;
      }
      case "JUMP_BALL_WON": {
        const { losingPlayer, winningPlayer } =
          gameEventData as GameEventJumpBallWon;
        if (winningPlayer.id === this.id) {
          this.jumpBallsWon++;
        }
        if (losingPlayer.id === this.id) {
          this.jumpBallsLost++;
        }

        break;
      }

      case "NON_SHOOTING_DEFENSIVE_FOUL": {
        const { foulingPlayer } =
          gameEventData as GameEventNonShootingDefensiveFoul;

        if (foulingPlayer.id === this.id) {
          this.fouls += 1;
        }

        break;
      }

      case "OFFENSIVE_REBOUND": {
        const { player } = gameEventData as GameEventRebound;
        if (player && player.id === this.id) {
          this.orb += 1;
        }

        break;
      }
      case "POSSESSION_ARROW_WON": {
        break;
      }
      case "SEGMENT_START": {
        break;
      }
      case "SEGMENT_END": {
        const gameSimSegmentData = this.gatherGameSimSegmentData([
          "jumpBallsLost",
          "jumpBallsWon",
          "pts",
        ]);

        this.gameSimSegmentData.push(gameSimSegmentData);

        break;
      }
      case "STARTING_LINEUP": {
        const { playersOnCourt } = gameEventData as GameEventStartingLineup;
        const myTeam = playersOnCourt[this.teamIndex];
        if (this.getPlayerFromArrayById(myTeam)) {
          this.starter = true;
        }
        break;
      }
      case "STEAL": {
        const { player, stealingPlayer } = gameEventData as GameEventSteal;

        if (player.id === this.id) {
          this.tov += 1;
        } else if (stealingPlayer.id === this.id) {
          this.stl += 1;
        }
      }
      case "TURNOVER": {
        const { player } = gameEventData as GameEventTurnover;
        if (player.id === this.id) {
          this.tov += 1;
        }
        break;
      }
      default: {
        const exhaustiveCheck: never = gameEvent;
        throw new Error(exhaustiveCheck);
      }
    }
  }
}

export default GamePlayerState;
